-- SUBQUERY

SELECT EMP_NAME, DEPT_CODE FROM EMPLOYEE WHERE DEPT_CODE = 'D9';

SELECT EMP_NAME, DEPT_CODE FROM EMPLOYEE WHERE 
DEPT_CODE = (SELECT DEPT_CODE FROM EMPLOYEE WHERE EMP_NAME = '노옹철');

SELECT EMP_ID, EMP_NAME, JOB_CODE, SALARY  FROM EMPLOYEE WHERE
(SELECT CEIL(AVG(SALARY)) FROM EMPLOYEE) <= SALARY ORDER BY JOB_CODE;

SELECT EMP_NAME, JOB_CODE, DEPT_CODE, SALARY FROM EMPLOYEE
WHERE SALARY IN (SELECT MAX(SALARY) FROM EMPLOYEE GROUP BY DEPT_CODE);

SELECT EMP_NAME, JOB_CODE, DEPT_CODE, HIRE_DATE FROM EMPLOYEE WHERE
(DEPT_CODE, JOB_CODE) IN (SELECT DEPT_CODE, JOB_CODE FROM EMPLOYEE 
WHERE SUBSTR(EMP_NO, 8, 1) = 2 AND ENT_YN = 'Y');

SELECT EMP_NAME, JOB_NAME, DEPT_TITLE, SALARY  FROM EMPLOYEE 
JOIN JOB USING (JOB_CODE) LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE (SELECT CEIL(AVG(SALARY)) FROM EMPLOYEE) <= SALARY ORDER BY JOB_CODE;

SELECT EMP_ID, EMP_NAME, JOB_NAME, DEPT_CODE, SALARY, HIRE_DATE FROM EMPLOYEE
LEFT JOIN JOB USING (JOB_CODE)
WHERE SALARY <= (SELECT CEIL(MIN(SALARY)) FROM EMPLOYEE);

SELECT EMP_ID, EMP_NAME, DEPT_TITLE, JOB_NAME, SALARY FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN JOB USING (JOB_CODE)
WHERE SALARY > (SELECT SALARY FROM EMPLOYEE WHERE EMP_NAME = '노옹철');

SELECT DEPT_TITLE, SUM(SALARY) FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
GROUP BY DEPT_TITLE
HAVING SUM(SALARY) = (SELECT MAX(SUM(SALARY)) FROM EMPLOYEE GROUP BY DEPT_CODE);

SELECT EMP_NAME, JOB_NAME, DEPT_CODE, SALARY FROM EMPLOYEE 
NATURAL JOIN JOB
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE SALARY IN (SELECT MAX(SALARY) FROM EMPLOYEE GROUP BY DEPT_CODE)
ORDER BY DEPT_CODE;

SELECT EMP_ID, EMP_NAME, DEPT_TITLE, JOB_NAME, '사수' 구분
FROM EMPLOYEE NATURAL JOIN JOB LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE EMP_ID IN (SELECT DISTINCT MANAGER_ID FROM EMPLOYEE WHERE MANAGER_ID IS NOT NULL);

SELECT EMP_ID, EMP_NAME, DEPT_TITLE, JOB_NAME, '사원' 구분
FROM EMPLOYEE NATURAL JOIN JOB LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE EMP_ID NOT IN (SELECT DISTINCT MANAGER_ID FROM EMPLOYEE WHERE MANAGER_ID IS NOT NULL);


SELECT EMP_ID, EMP_NAME, DEPT_TITLE, JOB_NAME, 
CASE WHEN EMP_ID IN (SELECT DISTINCT MANAGER_ID FROM EMPLOYEE WHERE MANAGER_ID IS NOT NULL) THEN '사수'
ELSE '사원'
END AS "구분"
FROM EMPLOYEE NATURAL JOIN JOB LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID) ORDER BY "구분";

SELECT EMP_ID, EMP_NAME, DEPT_TITLE, JOB_NAME, '사수' 구분
FROM EMPLOYEE NATURAL JOIN JOB LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE EMP_ID IN (SELECT DISTINCT MANAGER_ID FROM EMPLOYEE WHERE MANAGER_ID IS NOT NULL)
UNION 
SELECT EMP_ID, EMP_NAME, DEPT_TITLE, JOB_NAME, '사원' 구분
FROM EMPLOYEE NATURAL JOIN JOB LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE EMP_ID NOT IN (SELECT DISTINCT MANAGER_ID FROM EMPLOYEE WHERE MANAGER_ID IS NOT NULL);

SELECT EMP_ID, EMP_NAME, JOB_NAME, SALARY FROM EMPLOYEE
NATURAL JOIN JOB
WHERE SALARY > (SELECT MIN(SALARY) FROM EMPLOYEE NATURAL JOIN JOB WHERE JOB_NAME = '과장') 
AND JOB_NAME = '대리';

SELECT EMP_ID, EMP_NAME, JOB_NAME, SALARY FROM EMPLOYEE
NATURAL JOIN JOB
WHERE SALARY > ANY (SELECT SALARY FROM EMPLOYEE NATURAL JOIN JOB WHERE JOB_NAME IN '과장') 
AND JOB_NAME = '대리';


SELECT EMP_ID, EMP_NAME, JOB_NAME, SALARY FROM EMPLOYEE
NATURAL JOIN JOB
WHERE SALARY > ALL (SELECT SALARY FROM EMPLOYEE NATURAL JOIN JOB WHERE JOB_NAME = '차장')
AND JOB_NAME = '과장';

SELECT EMP_NAME, DEPT_CODE FROM EMPLOYEE 
WHERE DEPT_CODE IN (SELECT DEPT_ID FROM DEPARTMENT WHERE LOCATION_ID = 
(SELECT LOCAL_CODE FROM LOCATION WHERE NATIONAL_CODE = 'KO'))
ORDER BY DEPT_CODE;

SELECT * FROM EMPLOYEE;

SELECT EMP_NAME, JOB_NAME, DEPT_TITLE, HIRE_DATE FROM EMPLOYEE
NATURAL JOIN JOB 
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE (DEPT_CODE, JOB_CODE) = (SELECT DEPT_CODE, JOB_CODE FROM EMPLOYEE WHERE ENT_YN = 'Y' AND SUBSTR(EMP_NO, 8, 1) = '2');

-- 1. 노옹철 = 부서, 직급 
SELECT EMP_ID, EMP_NAME, JOB_CODE, DEPT_TITLE, JOB_NAME FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN JOB USING (JOB_CODE)
WHERE (DEPT_TITLE, JOB_NAME) IN (SELECT DEPT_TITLE, JOB_NAME FROM EMPLOYEE 
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
NATURAL JOIN JOB
WHERE EMP_NAME = '노옹철') AND EMP_NAME <> '노옹철';	

-- 2. 2000 HIRE_DATE = DEPT_TITLE, JOB_NAME

SELECT EMP_ID, EMP_NAME, DEPT_CODE, JOB_CODE, HIRE_DATE FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
NATURAL JOIN JOB
WHERE (DEPT_TITLE, JOB_NAME) IN (SELECT DEPT_TITLE, JOB_NAME FROM EMPLOYEE 
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
NATURAL JOIN JOB
WHERE EXTRACT (YEAR FROM HIRE_DATE) = 2000);

-- 3. 77년생 여자 = DEPT_CODE, MANAGER_ID
SELECT EMP_ID, EMP_NAME, DEPT_CODE, MANAGER_ID, EMP_NO, HIRE_DATE FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID) 
WHERE (DEPT_TITLE, MANAGER_ID) IN (SELECT DEPT_TITLE, MANAGER_ID FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID) 
WHERE SUBSTR(EMP_NO, 8, 1) = '2' AND EMP_NO LIKE '77%');

-- 평균급여 = same / 급여와 급여 평균은 만원 단위 TRUNC(col, -4)

SELECT EMP_ID, EMP_NAME, JOB_NAME, SALARY FROM EMPLOYEE
NATURAL JOIN JOB
WHERE (JOB_CODE, SALARY) IN (SELECT JOB_CODE, TRUNC(AVG(SALARY), -4) FROM EMPLOYEE GROUP BY JOB_CODE);


SELECT EMP_ID, EMP_NAME, DEPT_CODE, MANAGER_ID
FROM EMPLOYEE E
WHERE EXISTS (SELECT EMP_ID FROM EMPLOYEE M WHERE E.MANAGER_ID = M.EMP_ID);

SELECT EMP_NAME, SALARY, BONUS, JOB_CODE FROM EMPLOYEE e1 
WHERE EXISTS (SELECT EMP_NAME FROM EMPLOYEE e2 WHERE e1.BONUS*SALARY > e2.BONUS*SALARY);
	         
SELECT EMP_NAME, SALARY, BONUS, JOB_CODE FROM EMPLOYEE WHERE BONUS IS NOT NULL
ORDER BY SALARY;

-- AVG(SALARY) < EMP_NAME, JOB_TITLE, SALARY
SELECT EMP_NAME, JOB_CODE, SALARY FROM EMPLOYEE ORDER BY JOB_CODE;

SELECT EMP_NAME, JOB_CODE, SALARY FROM EMPLOYEE E1
WHERE SALARY > (SELECT AVG(SALARY) FROM EMPLOYEE E2 WHERE E1.JOB_CODE = E2.JOB_CODE);

SELECT EMP_NAME, SALARY, BONUS, JOB_CODE FROM EMPLOYEE E1
WHERE E1.SALARY > (SELECT AVG(SALARY*BONUS) FROM EMPLOYEE E2 WHERE E1.SALARY > E2.SALARY) AND BONUS IS NOT NULL
ORDER BY SALARY ;

SELECT EMP_ID, EMP_NAME, DEPT_CODE, MANAGER_ID
FROM EMPLOYEE E
WHERE EXISTS (SELECT EMP_ID FROM EMPLOYEE M WHERE E.MANAGER_ID = M.EMP_ID);

SELECT EMP_ID, EMP_NAME, DEPT_CODE, NVL(DEPT_TITLE, 'N/A'), JOB_NAME, HIRE_DATE FROM EMPLOYEE E1
NATURAL JOIN JOB
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE ENT_YN = 'N' AND E1.HIRE_DATE = (SELECT MIN(HIRE_DATE) FROM EMPLOYEE E2
WHERE E1.DEPT_CODE = E2.DEPT_CODE) ORDER BY HIRE_DATE DESC;

SELECT EMP_ID, EMP_NAME, MANAGER_ID, 
NVL((SELECT E2.EMP_NAME FROM EMPLOYEE E2 WHERE E1.MANAGER_ID = E2.EMP_ID), 'N/A') AS "MANGER_NAME"
FROM EMPLOYEE E1;

SELECT ROWNUM, EMP_NAME, SALARY FROM (SELECT * FROM EMPLOYEE ORDER BY SALARY DESC)
WHERE ROWNUM < 6; 

-- 3위
SELECT ROWNUM, DEPT_CODE, DEPT_TITLE, AVGSALARY FROM 
(SELECT DEPT_CODE, DEPT_TITLE, AVG(SALARY) AS "AVGSALARY" FROM EMPLOYEE 
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
GROUP BY DEPT_CODE, DEPT_TITLE
ORDER BY AVGSALARY DESC)
WHERE ROWNUM < 4;


WITH AVGSAL AS (SELECT DEPT_CODE, DEPT_TITLE, CEIL(AVG(SALARY)) AS "AVGSALARY" FROM EMPLOYEE 
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
GROUP BY DEPT_CODE, DEPT_TITLE
ORDER BY AVGSALARY DESC)
SELECT ROWNUM, DEPT_CODE, DEPT_TITLE, AVGSALARY FROM AVGSAL
WHERE ROWNUM < 4;

WITH TOPN_SAL AS (SELECT EMP_NAME, SALARY
FROM EMPLOYEE ORDER BY SALARY DESC)
SELECT ROWNUM, EMP_NAME, SALARY
FROM TOPN_SAL;

SELECT 순위, EMP_NAME, SALARY FROM (SELECT EMP_NAME, SALARY, 
RANK() OVER(ORDER BY SALARY DESC) AS 순위 FROM EMPLOYEE ORDER BY SALARY DESC);


SELECT 순위, EMP_NAME, SALARY FROM (SELECT EMP_NAME, SALARY,DENSE_RANK() 
OVER(ORDER BY SALARY DESC) AS 순위 
FROM EMPLOYEE ORDER BY SALARY DESC);

SELECT RANK() OVER (ORDER BY SALARY DESC) AS "RANK", EMP_NAME, SALARY FROM EMPLOYEE;
SELECT DENSE_RANK() OVER (ORDER BY SALARY DESC) AS "RANK", EMP_NAME, SALARY FROM EMPLOYEE;


------------------------------------------------------------------------------------------------------

-- 실습

-- 1. 전지연 사원이 속해있는 부서원들을 조회하시오 (단, 전지연은 제외)
-- 사번, 사원명, 전화번호, 고용일, 부서명

SELECT EMP_ID, EMP_NAME, PHONE, HIRE_DATE, DEPT_TITLE FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE DEPT_CODE = (SELECT DEPT_CODE FROM EMPLOYEE WHERE EMP_NAME = '전지연')
AND EMP_NAME != '전지연';

-- 2. 고용일이 2000년도 이후인 사원들 중 급여가 가장 높은 사원의
-- 사번, 사원명, 전화번호, 급여, 직급명을 조회하시오.

SELECT EMP_ID, EMP_NAME, PHONE, SALARY, JOB_NAME FROM EMPLOYEE
NATURAL JOIN JOB
WHERE SALARY = (SELECT MAX(SALARY) FROM EMPLOYEE WHERE EXTRACT (YEAR FROM HIRE_DATE) > 2000)
AND EXTRACT (YEAR FROM HIRE_DATE) > 2000;


-- 3. 노옹철 사원과 같은 부서, 같은 직급인 사원을 조회하시오. (단, 노옹철 사원은 제외)
-- 사번, 이름, 부서코드, 직급코드, 부서명, 직급명

SELECT EMP_ID, EMP_NAME, DEPT_CODE, JOB_CODE, DEPT_TITLE, JOB_NAME FROM EMPLOYEE
NATURAL JOIN JOB
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE (DEPT_CODE, JOB_CODE) IN (SELECT DEPT_CODE, JOB_CODE FROM EMPLOYEE WHERE EMP_NAME = '노옹철')
AND EMP_NAME != '노옹철';


-- 4. 2000년도 = DEPT_TITLE, JOB_NAME
-- 사번, 이름, 부서코드, 직급코드, 고용일

SELECT EMP_ID, EMP_NAME, DEPT_CODE, JOB_CODE, HIRE_DATE FROM EMPLOYEE
NATURAL JOIN JOB
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE (DEPT_TITLE, JOB_NAME) IN (SELECT DEPT_TITLE, JOB_NAME FROM EMPLOYEE 
NATURAL JOIN JOB
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE EXTRACT (YEAR FROM HIRE_DATE) = 2000);

-- 5. 77년생/여자 = DEPT_CODE, MANAGER_ID
-- 사번, 이름, 부서코드, 사수번호, 주민번호, 고용일

SELECT EMP_ID, EMP_NAME, DEPT_CODE, MANAGER_ID, EMP_NO, HIRE_DATE FROM EMPLOYEE
WHERE (DEPT_CODE, MANAGER_ID) IN (SELECT DEPT_CODE, MANAGER_ID FROM EMPLOYEE WHERE SUBSTR(EMP_NO, 8, 1) = 2 AND EMP_NO LIKE '77%');

-- 6. 부서별 입사일이 가장 빠른 사원의
-- SEL id,name,dpt code(if null 'n/a'), jobtitle, hiredate DEPT_CODE same HIRE_DATE > / order by hirdate
-- ent = 'n'
-- 사번, 이름, 부서명(NULL이면 '소속없음'), 직급명, 입사일을 조회하고
-- 입사일이 빠른 순으로 조회하시오
-- 단, 퇴사한 직원은 제외하고 조회..

SELECT -EMP_ID, EMP_NAME, NVL(DEPT_TITLE, 'N/A') AS dept_code, JOB_NAME, HIRE_DATE FROM EMPLOYEE
NATURAL JOIN JOB
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE HIRE_DATE IN (SELECT MIN(HIRE_DATE) FROM EMPLOYEE WHERE ENT_YN = 'N' GROUP BY DEPT_CODE)
AND ENT_YN = 'N'
ORDER BY HIRE_DATE;

-- 7. 직급별 나이가 가장 어린 직원의
-- jobname = MIN(EMP_NO)
-- 사번, 이름, 직급명, 나이, 보너스 포함 연봉을 조회하고
-- id,name,jobname, age (emp_no - sysdate), salary * (bonus * salary) * 12
-- 나이순으로 내림차순 정렬하세요
-- order by age desc
-- 단 연봉은 \124,800,000 으로 출력되게 하세요. (\ : 원 단위 기호)

WITH AGE_SALARY AS (SELECT EMP_ID, EMP_NAME, JOB_NAME, (EXTRACT (YEAR FROM SYSDATE) - EXTRACT (YEAR FROM (TO_DATE(SUBSTR(EMP_NO, 1, 6), 'RRMMDD')))) AS "AGE", SALARY * ( 1 + NVL(BONUS, 0)) * 12 AS "ANNUAL_SALARY"  
FROM EMPLOYEE
NATURAL JOIN JOB
ORDER BY AGE)
SELECT EMP_ID, EMP_NAME, JOB_NAME, AGE, '₩' || TO_CHAR(ANNUAL_SALARY, '999,999,999') AS "ANNUAL_SALARY_WON" FROM AGE_SALARY a1
NATURAL JOIN EMPLOYEE
WHERE (AGE, JOB_NAME) IN (SELECT MIN(EXTRACT (YEAR FROM SYSDATE) - EXTRACT (YEAR FROM (TO_DATE(SUBSTR(EMP_NO, 1, 6), 'RRMMDD')))), JOB_NAME FROM AGE_SALARY NATURAL JOIN EMPLOYEE GROUP BY JOB_NAME)
ORDER BY AGE DESC;

-- teachers answer
SELECT MAX(EMP_NO) FROM EMPLOYEE GROUP BY JOB_CODE;

SELECT EMP_ID, EMP_NAME, JOB_NAME, 
FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE(SUBSTR(EMP_NO, 1, 6), 'RRMMDD')) / 12) AS "AGE",
'₩' || TO_CHAR(SALARY * ( 1 + NVL(BONUS, 0)) * 12, '999,999,999') AS "ANNUAL_SALARY"  
FROM EMPLOYEE
NATURAL JOIN JOB
WHERE (EMP_NO) IN 
(SELECT MAX(EMP_NO) FROM EMPLOYEE 
GROUP BY JOB_CODE)
ORDER BY AGE DESC;


--SELECT SALARY * 12 * ( 1 + BONUS) AS "ANNUAL SALARY", EMP_NAME  FROM EMPLOYEE;
--SELECT SALARY * 12 AS "ANNUAL SALARY", EMP_NAME  FROM EMPLOYEE;
--SELECT (BONUS+1) * SALARY AS "ANNUAL SALARY", EMP_NAME  FROM EMPLOYEE;
--
--
--SELECT * FROM EMPLOYEE;
--
--SELECT EXTRACT (YEAR FROM SYSDATE) - EXTRACT (YEAR FROM (TO_DATE(SUBSTR(EMP_NO, 1, 6), 'RRMMDD'))) AS AGE FROM EMPLOYEE E1
--NATURAL JOIN JOB
--WHERE EXTRACT (YEAR FROM SYSDATE) - EXTRACT (YEAR FROM (TO_DATE(SUBSTR(EMP_NO, 1, 6), 'RRMMDD'))) <
--(SELECT EXTRACT (YEAR FROM SYSDATE) - EXTRACT (YEAR FROM (TO_DATE(SUBSTR(EMP_NO, 1, 6), 'RRMMDD'))) AS AGE FROM EMPLOYEE E2
--WHERE E1.EMP_ID != E2.EMP_ID)
--ORDER BY AGE DESC;



