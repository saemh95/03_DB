-- FUNCTION : 

-- ONLY ONE FUNCTION : 1function -> 1value

-- GROUP FUNCTION : 1function -> multiple value

-- 1 function
-- LENGTH

SELECT EMAIL, LENGTH (EMAIL) FROM EMPLOYEE;

-- INSTR

SELECT INSTR('AABAAC', 'B')  FROM DUAL;

SELECT INSTR('AABAACAABBAAB', 'B', 11) AS B FROM DUAL; 

SELECT INSTR('AABAACAABBAAB', 'B', 5, 2) AS B FROM DUAL; 
--			where to find / what / starting point / placement

SELECT EMP_NAME, EMAIL, INSTR(EMAIL, '@') AS "@ ORDER" FROM EMPLOYEE;

-- SUBSTR()
SELECT EMP_NAME, EMAIL, SUBSTR (EMAIL, 1, INSTR(EMAIL, '@') -1) AS "ID" FROM EMPLOYEE;

-- TRIM()
SELECT * FROM EMPLOYEE;
SELECT TRIM (BOTH '#' FROM '####HI####') FROM DUAL;

-- Number FUNCTION

SELECT ABS(10), ABS(-10) FROM DUAL;

SELECT 'same' FROM DUAL WHERE ABS(10) = ABS(-10);

-- MOD

SELECT EMP_NAME, SALARY, MOD(SALARY, 1000000) FROM EMPLOYEE;

SELECT EMP_ID, EMP_NAME FROM EMPLOYEE WHERE MOD(EMP_ID, 2) = 0;
SELECT EMP_ID, EMP_NAME FROM EMPLOYEE WHERE MOD(EMP_ID, 2) = 1;

-- ROUND
SELECT ROUND(123.456, 2) FROM DUAL;

-- CEIL round up/FLOOR round down
SELECT EMP_NAME, ROUND (SALARY/252, 2) FROM EMPLOYEE;
SELECT EMP_NAME, ROUND (CEIL (SALARY/252)) FROM EMPLOYEE;

-- TRUNC
SELECT EMP_NAME, TRUNC (SALARY/252, 2) FROM EMPLOYEE;

--DATE FUNCTION

-- SYSDATE
-- SYSTIMESTAMP
SELECT SYSTIMESTAMP FROM DUAL;

-- MONTHS_BETWEEN
SELECT ROUND(MONTHS_BETWEEN(SYSDATE, TO_DATE('2024-06-26', 'YYYY-MM-DD')), 3) FROM DUAL;
SELECT MONTHS_BETWEEN(SYSDATE, '2024-06-26', 'YYYY-MM-DD') FROM DUAL;

SELECT EMP_NAME, HIRE_DATE, CEIL (MONTHS_BETWEEN(SYSDATE, HIRE_DATE)) AS "Months worked", 
CEIL (MONTHS_BETWEEN(SYSDATE, HIRE_DATE)/12) AS "Years worked" FROM EMPLOYEE ORDER BY HIRE_DATE DESC;

SELECT EMP_NAME, HIRE_DATE, CEIL (MONTHS_BETWEEN(SYSDATE, HIRE_DATE)) || ' Month' "Months worked", 
CEIL (MONTHS_BETWEEN(SYSDATE, HIRE_DATE)/12) || ' Years' "Years Worked" FROM EMPLOYEE ORDER BY HIRE_DATE DESC;

-- ADD_MONTHS(date, num)
SELECT EMP_NAME, HIRE_DATE, CEIL (MONTHS_BETWEEN(SYSDATE, HIRE_DATE)) || ' Month' "Months worked", 
CEIL (MONTHS_BETWEEN(SYSDATE, HIRE_DATE)/12) || ' Years' "Years Worked", ADD_MONTHS(HIRE_DATE, 4) FROM EMPLOYEE ORDER BY HIRE_DATE DESC;

SELECT LAST_DAY('2024-02-29') FROM DUAL;

ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD' SCOPE=SPFILE;
--ALTER SYSTEM SET NLS_DATE_FORMAT = 'yyyy-mm-dd' SCOPE=BOTH ;
ALTER SESSION SET NLS_DATE_FORMAT = 'yyyy-MM-dd';

SELECT EMP_NAME, 
EXTRACT (YEAR FROM HIRE_DATE) || '년' || 
EXTRACT (MONTH FROM HIRE_DATE) || '월' || 
EXTRACT (DAY FROM HIRE_DATE) || '일' AS 입사일 FROM EMPLOYEE;

-- CHAR, NUMBER, DATE -> change type

--TO_CHAR(date, format) 
--TO_CHAR(num, format) 
--format for num : 
--9 - 숫자 하칸, 오른쪽 정렬
--0 - 숫자 한칸, 오른쪽 정렬 + 빈칸 0 추가
--L - 현재 DB에 설정된 나라의 화패

SELECT TO_CHAR(1234) FROM DUAL;

SELECT TO_CHAR (1234, '99999') FROM DUAL;
SELECT TO_CHAR (1234, '00000') FROM DUAL;

SELECT TO_CHAR (EXTRACT(MONTH FROM HIRE_DATE), '00' ) || '월' FROM EMPLOYEE;

SELECT TO_CHAR(1000000, '9,999,999') || ' WON' FROM DUAL;

SELECT TO_CHAR(1000000, 'L9,999,999') AS "DOLLAR" FROM DUAL; 
 
SELECT TO_CHAR (SYSDATE , 'YYYY/MM/DD') FROM DUAL;

SELECT TO_CHAR (SYSDATE, 'MM/DD (YY)') FROM DUAL;

SELECT TO_CHAR (SYSDATE, 'YYY"년" MM"월" DD"일" (DY)') FROM DUAL;

SELECT TO_DATE('2024-02-29', 'yyyy-mm-dd') FROM DUAL; 

SELECT EMP_NAME, TO_CHAR (TO_DATE(SUBSTR(EMP_NO, 1, INSTR(EMP_NO, '-') -1 ), 'RRMMDD'), 'YYYY "년" MM "월" DD "일"') AS "생년월일" FROM EMPLOYEE;

SELECT TO_NUMBER ('1,000,000', '9,999,999') + 5000000 FROM DUAL;

SELECT TO_NUMBER ('24123', '99999') FROM DUAL;

--NULL

--NVL(col, value == null -> change value)

SELECT * FROM EMPLOYEE;

--NULL * value = always NULL
SELECT EMP_NAME, SALARY, NVL(BONUS, 0), SALARY * NVL(BONUS, 0)  FROM EMPLOYEE;

--NVL2(col, value1, value)

SELECT EMP_NAME, NVL2(BONUS, 'O','X') FROM EMPLOYEE;


--DECODE
SELECT EMP_NAME, DECODE(SUBSTR(EMP_NO, 8, 1), '1', '남성', '2', '여성')  FROM EMPLOYEE ORDER BY (SUBSTR(EMP_NO,8,1));

-- J7 = 20%
-- J6 = 15%
-- J5 = 10%
-- Rest = 5%

SELECT EMP_NAME, JOB_CODE, SALARY, DECODE(JOB_CODE, 'J7', '20%', 'J6', '15%', 'J5', '10%', '5%') AS RAISE, 
DECODE(JOB_CODE, 'J7', SALARY*1.2, 'J6', SALARY*1.15, 'J5', SALARY*1.1, SALARY*1.05) AS "NEW SALARY"  
FROM EMPLOYEE 
ORDER BY DECODE(JOB_CODE, 'J7', SALARY*1.2, 'J6', SALARY*1.15, 'J5', SALARY*1.1, SALARY*1.05);

--CASE WHEN () THEN ()
--     WHEN () THEN ()
--     WHEN () THEN ()
--		 ELSE ()
--END

SELECT EMP_NAME, SALARY, CASE WHEN SALARY >= 5000000 THEN '대' 
WHEN SALARY >= 3000000 THEN '중' 
ELSE '소' END AS "SALARY LEVEL" FROM EMPLOYEE ORDER BY SALARY DESC ;

--GROUP
--SUM() 
--MIN() 
--MAX() 
--AVG()
SELECT SUM (SALARY) AS SUM FROM EMPLOYEE;

SELECT ROUND (AVG (SALARY)) AS AVG FROM EMPLOYEE;

SELECT ROUND (MAX (SALARY)) AS "MAX" FROM EMPLOYEE;

SELECT ROUND (MIN (SALARY)) AS "MIN" FROM EMPLOYEE;

SELECT SUM(SALARY), ROUND(AVG(SALARY)) FROM EMPLOYEE WHERE DEPT_CODE = 'D9';

SELECT MIN(EMP_NAME), MIN(SALARY), MIN(HIRE_DATE), MIN(EMAIL) FROM EMPLOYEE;

SELECT MAX(EMP_NAME), MAX(SALARY), MAX(HIRE_DATE), MAX(EMAIL) FROM EMPLOYEE;

SELECT EMP_NAME, SALARY, JOB_CODE FROM EMPLOYEE WHERE SALARY = (SELECT MAX(SALARY) FROM EMPLOYEE);

--COUNT
--COUNT ([DISTINCT] COL) : same value X
--COUNT(*) : all value with NULL
--COUNT(COL) : NULL X

SELECT COUNT(*) FROM EMPLOYEE; 

SELECT COUNT(BONUS) FROM EMPLOYEE;
SELECT COUNT(DISTINCT BONUS) FROM EMPLOYEE;
SELECT COUNT(*) FROM EMPLOYEE WHERE BONUS IS NOT NULL;


SELECT COUNT(*) FROM EMPLOYEE WHERE SUBSTR(EMP_NO, 8, 1) = 1;
