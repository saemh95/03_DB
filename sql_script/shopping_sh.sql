



--1. 카테고리 테이블 (CATEGORIES)
--
--카테고리 ID (CATEGORY_ID) - NUMBER [PK]
--카테고리 이름 (CATEGORY_NAME) - VARCHAR2(100) [UNIQUE]

CREATE TABLE CATEGORIES (
CATEGORY_ID NUMBER CONSTRAINTS CATEGORY_ID_PK PRIMARY KEY,
CATEGORY_NAME VARCHAR2(100) CONSTRAINTS CATEGORY_NAME_U UNIQUE
);

SELECT * FROM CATEGORIES;


--2. 상품 정보 테이블 (PRODUCTS)
--
--상품 코드 (PRODUCT_ID) - NUMBER [PK]
--상품 이름 (PRODUCT_NAME) - VARCHAR2(100) [NOT NULL]
--카테고리 (CATEGORY) - NUMBER [FK - CATEGORIES(CATEGORY_ID)]
--가격 (PRICE) - NUMBER [DEFAULT 0]
--재고량 (STOCK_QUANTITY) NUMBER [DEFAULT 0]

CREATE TABLE PRODUCTS (
PRODUCT_ID NUMBER CONSTRAINT PRODUCT_ID_PK PRIMARY KEY,
PRODUCT_NAME VARCHAR2(100) CONSTRAINT PRODUCT_NAME_NN NOT NULL,
CATEGORY NUMBER CONSTRAINTS CATEGORY_FK REFERENCES CATEGORIES,
PRICE NUMBER DEFAULT 0,
STACK_QUANTITY NUMBER DEFAULT 0
);

SELECT * FROM PRODUCTS;

--3. 고객 정보 테이블 (CUSTOMERS)
--
--고객 ID (CUSTOMER_ID) - NUMBER [PK]
--이름 (NAME) - VARCHAR2(20) [NOT NULL]
--성별 (GENDER) - CHAR(3) [CHECK 남, 여]
--주소 (ADDRESS) - VARCHAR2(100)  
--전화번호 (PHONE) - VARCHAR2(30)

CREATE TABLE CUSTOMERS (
CUSTOMER_ID NUMBER CONSTRAINT CUSTOMER_ID_PK PRIMARY KEY,
NAME VARCHAR2(20) CONSTRAINT NAME_NN NOT NULL,
GENDER CHAR(3) CONSTRAINT GENDER_CK CHECK(GENDER IN ('남', '여')),
ADDRESS VARCHAR2(100),
PHONE VARCHAR2(30)
);

--4. 주문 정보 테이블 (ORDERS)
--
--주문 번호 (ORDER_ID) - NUMBER [PK]
--고객 ID (CUSTOMER_ID) - NUMBER [FK - CUSTOMERS(CUSTOMER_ID) ON DELETE CASCADE]
--주문일 (ORDER_DATE) - DATE [DEFAULT SYSDATE]
--처리상태 (STATUS) - CHAR(1) [CHECK ('Y', 'N') DEFAULT 'N']

CREATE TABLE ORDERS (
ORDER_ID NUMBER CONSTRAINT ORDER_ID_PK PRIMARY KEY,
CUSTOMER_ID NUMBER CONSTRAINT CUSTOMER_ID_FK REFERENCES CUSTOMERS(CUSTOMER_ID) ON DELETE CASCADE,
ORDER_DATE DATE DEFAULT SYSDATE,
STATUS CHAR(1) DEFAULT 'N' CONSTRAINT STATUS_CK CHECK(STATUS IN ('Y', 'N')) 
);


--5. 주문 상세 정보 테이블 (ORDER_DETAILS)
--
--주문 상세 ID (ORDER_DETAIL_ID) - NUMBER [PK]
--주문 번호 (ORDER_ID) NUMBER - [FK - ORDERS(ORDER_ID) ON DELETE CASCADE]
--상품 코드 (PRODUCT_ID) NUMBER - [FK - PRODUCTS(PRODUCT_ID) ON DELETE SET NULL]
--수량 (QUANTITY) NUMBER
--가격 (PRICE_PER_UNIT) NUMBER

CREATE TABLE ORDER_DETAILS (
ORDER_DETAIL_ID NUMBER CONSTRAINT ORDER_DETAIL_ID_PK PRIMARY KEY,
ORDER_ID NUMBER CONSTRAINT ORDER_ID_FK REFERENCES ORDERS(ORDER_ID) ON DELETE CASCADE,
PRODUCT_ID NUMBER CONSTRAINT PRODUCT_ID_FK REFERENCES PRODUCTS(PRODUCT_ID) ON DELETE SET NULL,
QUANTITY NUMBER,
PRICE_PER_UNIT NUMBER
);

INSERT INTO CATEGORIES VALUES (1, '스마트폰');
INSERT INTO CATEGORIES VALUES (2, 'TV');
INSERT INTO CATEGORIES VALUES (3, 'Gaming');
COMMIT;

INSERT INTO PRODUCTS VALUES (101, 'Apple iPhone 12', 1, 1500000, 30);
INSERT INTO PRODUCTS VALUES (102, 'Samsung Galaxy S24', 1, 1800000, 50);
INSERT INTO PRODUCTS VALUES (201, 'LG OLED TV', 2, 3600000, 10);
INSERT INTO PRODUCTS VALUES (301, 'Sony PlayStation 5', 3, 700000, 15);

SELECT * FROM PRODUCTS;

INSERT INTO CUSTOMERS VALUES (1, '홍길동', '남', '서울시 성동구 왕십리', '010-1111-2222');
INSERT INTO CUSTOMERS VALUES (2, '유관순', '여', '서울시 종로구 안국동', '010-3333-1111');

COMMIT;

SELECT * FROM CUSTOMERS;

INSERT INTO ORDERS VALUES (576, 1, TO_DATE('2024-02-29', 'YYYY-MM-DD'), 'N');
INSERT INTO ORDERS VALUES (987, 2, TO_DATE('2024-03-11', 'YYYY-MM-DD'), 'Y');
INSERT INTO ORDERS VALUES (777, 2, TO_DATE('2024-03-11', 'YYYY-MM-DD'), 'N');
INSERT INTO ORDERS VALUES (134, 1, TO_DATE('2022-12-25', 'YYYY-MM-DD'), 'Y');
INSERT INTO ORDERS VALUES (499, 1, TO_DATE('2020-01-03', 'YYYY-MM-DD'), 'Y');

SELECT * FROM ORDERS;

INSERT INTO ORDER_DETAILS VALUES (111, 576, 101, 1, 1500000);
INSERT INTO ORDER_DETAILS VALUES (222, 978, 201, 2, 3600000);
INSERT INTO ORDER_DETAILS VALUES (333, 978, 102, 1, 1800000);
INSERT INTO ORDER_DETAILS VALUES (444, 777, 301, 5, 700000);
INSERT INTO ORDER_DETAILS VALUES (555, 134, 102, 1, 1800000);
INSERT INTO ORDER_DETAILS VALUES (666, 499, 201, 3, 3600000);

SELECT * FROM ORDER_DETAILS;

UPDATE ORDERS SET ORDER_ID = 978 WHERE ORDER_ID = 987;

SELECT * FROM CATEGORIES;
SELECT * FROM PRODUCTS;
SELECT * FROM CUSTOMERS;
SELECT * FROM ORDERS;
SELECT * FROM ORDER_DETAILS;

-- 1.쇼핑몰 관리자가 주문은 받았으나, 아직 처리가 안된 주문을 처리하려고 한다. 
--현재 주문 내역 중 아직 처리되지 않은 주문을 조회하시오. 😀
-- STATUS 'N'
--(고객명, 주문일, 처리상태)
-- CUSTOMER.Name, ORDERS.ORDER_DATE, ORDERS.STATUS

SELECT NAME, ORDER_DATE, STATUS FROM CUSTOMERS
NATURAL JOIN ORDERS WHERE STATUS = 'N';


-- 2. 홍길동 고객이 이번년도에 본인이 주문한 전체 내역을 조회하고자 한다. 
-- ORDER_DATE = 2024 CUSTOMER.NAME = 홍길동
--주문번호, 주문날짜, 처리상태 조회하시오
-- ORDER_ID, ORDER_DATE, STATUS

SELECT ORDER_ID, ORDER_DATE, STATUS FROM CUSTOMERS
NATURAL JOIN ORDERS WHERE NAME = '홍길동' AND EXTRACT(YEAR FROM ORDER_DATE) = 2024;



--3. 유관순 고객이 지금껏 주문한 상품의 수량 별 금액을 조회하려고 한다.
-- CUSTOMER.NAME = 유관순, 
--주문번호, 상품명, 수량, 개별금액, 주문별금액을 조회하시오 😀
-- ORDER_ID, PRODUCT_NAME, QUANTITY, PRODUCT_PRICE, PRODUCT_RICE * QUANTITY

SELECT ORDER_ID, PRODUCT_NAME, QUANTITY, PRICE, PRICE * QUANTITY AS "TOTAL PRICE"  FROM CUSTOMERS
NATURAL JOIN ORDERS o
NATURAL JOIN PRODUCTS
NATURAL JOIN ORDER_DETAILS
WHERE NAME = '유관순' ORDER BY QUANTITY DESC;



